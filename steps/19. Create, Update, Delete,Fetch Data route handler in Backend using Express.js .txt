1.

Desktop\react native expo\employeeapp\server\app.js


const express = require('express');
const app = express();
const bodyParser = require('body-parser')
const mongoose = require('mongoose')
const port = 5000
require('./Employee')



app.use(bodyParser.json())


const Employee = mongoose.model("employee")

//FjIz5W6sB32Jcf03

const MONGOURI = "mongodb+srv://EmployeeApp:FjIz5W6sB32Jcf03@cluster0.japc9.mongodb.net/myFirstDatabase?retryWrites=true&w=majority"


mongoose.connect(MONGOURI, {
    useNewUrlParser: true,
    useUnifiedTopology: true,
})
mongoose.connection.on('connected', () => {
    console.log("connected mongodb yahh................................................................")
})
mongoose.connection.on('error', (err) => {
    console.log(' err connected', err)
})



//Get All Employees
app.get('/', (req, res) => {
    Employee.find({})
        .then(data => {
            console.log(data)
            res.send(data)
        }).catch(err => {
            console.log(err)
        })
})


//Post Data From Backend
app.post('/send', (req, res) => {
    // console.log(req.body)
    const emplouee = new Employee({
        name: req.body.name,
        email: req.body.email,
        phone: req.body.phone,
        picture: req.body.picture,
        salary: req.body.salary,
        position: req.body.position,
    })
    emplouee.save()
        .then(data => {
            console.log(data)
            res.send(data)
        }).catch(err => {
            console.log(err)
        })
})


// Delete the record
app.post('/delete', (req, res) => {
    Employee.findByIdAndRemove(req.body.id)
        .then(data => {
            console.log(data)
            res.send('Deleted.....')
        }).catch(err => {
            console.log(err)
        })
})

//Update the Data
app.post('/update', (req, res) => {
    Employee.findByIdAndUpdate(req.body.id, {
        name: req.body.name,
        email: req.body.email,
        phone: req.body.phone,
        picture: req.body.picture,
        salary: req.body.salary,
        position: req.body.position,
    }).then(data => {
        console.log(data)
        res.send(data)
    }).catch(err => {
        console.log(err)
    })
})





app.listen(port, () => {
    console.log(`Example app listening on port ${port}`)
})





2. IN POSTMAN


i.get    http://localhost:5000/


ii.

a. post:  http://localhost:5000/send/
b. header:  key                value
            Content-Type       application/json
c.Body

   raw            json

{
    "name":"Gourab",
    "email":"gourabbanik2021@gmail.com",
    "phone":"8167709533",
    "picture":"some url",
    "salary":"500000",
    "position":"web Dev" 
}


iii.

a. post:  http://localhost:5000/send/
b. header:  key                value
            Content-Type       application/json
c.Body

   raw            json
{
    "id":"6228d6410fcfae59b91c9b72"
}

iv.



a. post:  http://localhost:5000/update/
b. header:  key                value
            Content-Type       application/json
c.Body

   raw            json
{
    "id":"6228dad19c0ec40697cd8f49",
    "name":"Tania",
    "email":"tania1@gmail.com",
    "phone":"8167709533",
    "picture":"some url",
    "salary":"500000",
    "position":"web Dev" 
}







